version: '3'

networks:
  app-network:
    driver: bridge


services:
  Api1:
    build:
      context: .
      dockerfile: Dockerfile  # Name of your Dockerfile if it's not the default "Dockerfile"
    image: restapi/restapi:v1
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    environment:
      POSTGRES_DB : ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      PORT: 8001
    ports:
      - "8001:8001"
    networks:
      - app-network


  Api2:
    image: restapi/restapi:v1
    depends_on:
     Api1:
      condition: service_started
     postgres:
        condition: service_healthy
        restart: true
    environment:
      POSTGRES_DB : ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      PORT: 8002
    ports:
      - "8002:8002"
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro 
    depends_on:
      Api1:
        condition: service_started
      Api2: 
        condition: service_started
    networks:
      - app-network

  postgres:
    image: postgres:15.3-bullseye
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    user: "999:999"  # PostgreSQL user ID
    networks:
      - app-network

volumes:
  postgres_data:
  